name: "$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)"
trigger:
  branches:
    include:
      - develop
      - master
      - release
      - feature/*
      - hotfix/*
      - topic
      - test/*
resources:
  - repo: self
parameters:
  - name: namespace
    displayName: Seleccionar ambiente
    type: string
    default: omnichannel
    values:
    - ecommerce
    - omnichannel
    - recurrency
    - prescription
    - couponomni
    - coupon
    - servipartner
    - custintell
    - alimed
    - servibackoffice
    - platform
    - loyalty
    - coupon
    - vtex
    - tomador
    - performance
    - mgpartner
  - name: dev
    displayName: Select Branch Dev
    type: string
    default: 'Insertar Branch a desplegar en dev'
  - name: qas
    displayName: Select Branch Qas
    type: string
    default: 'Insertar Branch a desplegar en qas'
  - name: uat
    displayName: Select Branch Uat
    type: string
    default: 'Insertar Branch a desplegar en uat'
variables:
  domain: pe.farmaciasperuanas
  projectname: ommni
  nameapp: web-admin-operaciones
  typeapp: bus
  owner: fps
  vmImageName: ubuntu-20.04
  vmImagePool: OnPremise - Farmacias Peruanas
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: "-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)"
  PORT: 80
  KUBECTL_VERSION: 1.19.0
  PROFILE_DEV: $(crossteam-dev)
  PROFILE_QAS: $(crossteam-qas)
  PROFILE_UAT: $(crossteam-uat)
  PROFILE_PRD: $(crossteam-prd)
  NAMESPACE: ${{parameters.namespace}}
  GCP_REGISTRY_DEV: GCP-REGISTRY-FP-DEV-DIG
  GCP_PROJECT_DEV: fp-dev-dig-project
  GCP_GKE_DEV: GCP-GKE-FP-DEV-DIG
  GCP_REGISTRY_QAS: GCP-REGISTRY-FP-QAS-DIG
  GCP_PROJECT_QAS: fp-qas-dig-project
  GCP_GKE_QAS: GCP-GKE-FP-QAS-DIG
  GCP_REGISTRY_UAT: GCP-REGISTRY-FP-UAT-DIG
  GCP_PROJECT_UAT: fp-uat-dig-project
  GCP_GKE_UAT: GCP-GKE-FP-UAT-DIG
  GCP_REGISTRY_PRD: GCP-REGISTRY-FP-PRD-DIG
  GCP_PROJECT_PRD: fp-prd-dig-project
  GCP_GKE_PRD: GCP-GKE-FP-PRD-DIG
  AWS_ECR: AWS-ECR
  AWS_EKS: AWS-EKS
  ECR_IMAGE: web-admin-operaciones
  AWS_REGION: us-west-2
  AWS_EKS_UAT: AWS-EKS-UAT
  AWS_EKS_PRD: AWS-EKS-PRD
stages:
  - stage: compileAndScan
    displayName: compileAndScan
    jobs:
      - job: compileJob
        displayName: compileJob
        continueOnError: false
        pool:
          vmImage: $(vmImageName)
        steps:
          - bash: |
              ccommit="$(Build.SourceVersion)"
              echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
            displayName: createTag
            name: createTag
          - bash: |
              #fullbranch=$(Build.SourceBranch)
              #echo "##vso[task.setvariable variable=branch]${fullbranch:11}"
            displayName: readBranch
            name: readBranch
          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: 14.17.6
          - script: npm cache clean -f
            displayName: 'Clear npm cache'
          - task: Npm@1
            displayName: npmInstall
            name: npmInstall
            inputs:
              command: custom
              verbose: false
              customCommand: install
                #- task: Npm@1
                #displayName: test
                #name: test
                #inputs:
                #command: custom
                #verbose: false
                #customCommand: >-
              #run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI --code-coverage
          - task: SonarCloudPrepare@1
            displayName: prepareAnalisisSonarCloud
            name: prepareAnalisisSonarCloudmaster
            condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
            inputs:
              SonarCloud: SONARCLOUD-FARMACIAS
              organization: farmacias-ti
              scannerMode: CLI
              projectKey: "$(domain).$(projectname):$(owner)-$(typeapp)-$(nameapp)"
              projectName: $(owner)-$(typeapp)-$(nameapp)
              extraProperties: |
                sonar.projectKey=$(domain).$(projectname):$(owner)-$(typeapp)-$(nameapp)
                sonar.projectName=$(owner)-$(typeapp)-$(nameapp)
                sonar.projectVersion=$(tag)
                sonar.sources=src
                sonar.tests=src
                sonar.sourceEncoding=UTF-8
                sonar.exclusions=**/dist/**,**/node_modules/**,**/*.spec.ts,**/src/assets/**,**.d.ts,**/services/**,**/interceptors/**,**/enviroments/**,**/security/**,**/models/**
                sonar.test.inclusions=**/*.spec.ts
                sonar.coverage.exclusions=**/dist/**,**/node_modules/**,**/*.spec.ts,**/src/assets/**,**.d.ts,**/services/**,**/interceptors/**,**/enviroments/**,**/security/**,**/models/**
                sonar.ts.tslintconfigpath=tslint.json
                sonar.javascript.lcov.reportPaths=coverageReport/lcov.info
                sonar.branch.name=$(branch)
              enabled: false
          - task: SonarCloudAnalyze@1
            displayName: Run Code Analysis
            enabled: false
            continueOnError: true
          - task: SonarCloudPublish@1
            displayName: Publish Quality Gate Result
            enabled: false
            continueOnError: true
          - publish: k8s
            artifact: k8s
  - stage: devDeploy
    displayName: devDeploy
    condition: >-
      and(succeeded('compileAndScan'),or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/${{parameters.dev}}')))
    jobs:
      - job: buildJobDev
        displayName: buildJob Dev
        continueOnError: false
        pool:
          vmImage: $(vmImageName)
        steps:
          - bash: |
              ccommit="$(Build.SourceVersion)"
              echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
            displayName: setvariables
            name: setvariables
          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: 14.17.6
          - task: Npm@1
            displayName: npmInstall
            name: npmInstall
            inputs:
              command: custom
              verbose: false
              customCommand: install
          - task: Npm@1
            displayName: npmBuild
            name: npmBuild
            inputs:
              command: custom
              verbose: false
              customCommand: run build -- --configuration $(PROFILE_DEV)
          - task: Docker@2
            displayName: "Push and Push Image"
            inputs:
              command: buildAndPush
              containerRegistry: $(GCP_REGISTRY_DEV)
              repository: "$(GCP_PROJECT_DEV)/$(owner)-$(typeapp)-$(nameapp)"
              tags: $(tag)
      - deployment: devDeploy
        displayName: devDeploy
        dependsOn: buildJobDev
        condition: >-
          and(succeeded('buildJobDev'),or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/${{parameters.dev}}')))
        environment: development
        pool:
          vmImage: $(vmImageName)
        variables:
          subdomain: dev-$(namespace)-$(owner)-$(typeapp)-$(nameapp)
          domain: solucionesdigitalfps.com
          secret: solucionesdigitalfps-com
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    curl ifconfig.co
                  displayName: publicIp
                  name: publicIp
                - task: KubectlInstaller@0
                  displayName: Kubectl installer
                  inputs:
                    kubectlVersion: $(KUBECTL_VERSION)
                - download: current
                  artifact: k8s
                - bash: |
                    ccommit="$(Build.SourceVersion)"
                    echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
                  displayName: setvariables
                  name: setvariables
                - bash: |
                    sed -i 's/#{PROJECT}/$(GCP_PROJECT_DEV)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{TAG}/$(tag)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{PORT}/$(PORT)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{PROFILE}/$(PROFILE_DEV)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{NAMESPACE}/$(NAMESPACE)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{SUBDOMAIN}/$(subdomain)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{DOMAIN}/$(domain)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{SECRET}/$(secret)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{owner}/$(owner)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{typeapp}/$(typeapp)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{nameapp}/$(nameapp)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                  displayName: replaceParameters
                  name: replaceParameters
                - task: Kubernetes@1
                  displayName: kubectl apply
                  inputs:
                    connectionType: Kubernetes Service Connection
                    kubernetesServiceEndpoint: $(GCP_GKE_DEV)
                    command: apply
                    arguments: -f $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    versionOrLocation: version
                    versionSpec: $(KUBECTL_VERSION)
                - task: AzureCLI@2
                  displayName: AutoRecordDNS
                  inputs:
                    azureSubscription: 'SP-LOWENVIRONMENTS-GCP'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: 'az network dns record-set a add-record -g rg_ti-arq-dig-dev -z solucionesdigitalfps.com -n dev-$(namespace)-$(owner)-$(typeapp)-$(nameapp) -a 34.111.101.170'

  - stage: qaDeploy
    displayName: qaDeploy
    dependsOn: devDeploy
    condition: >-
      and(succeeded('compileAndScan'),or(eq(variables['Build.SourceBranch'], 'refs/heads/topic'), eq(variables['Build.SourceBranch'], 'refs/heads/${{parameters.qas}}')))
    jobs:
      - job: buildJobQas
        displayName: buildJob Qas
        continueOnError: false
        pool:
          vmImage: $(vmImageName)
        steps:
          - bash: |
              ccommit="$(Build.SourceVersion)"
              echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
            displayName: setvariables
            name: setvariables
          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: 14.17.6
          - task: Npm@1
            displayName: npmInstall
            name: npmInstall
            inputs:
              command: custom
              verbose: false
              customCommand: install
          - task: Npm@1
            displayName: npmBuild
            name: npmBuild
            inputs:
              command: custom
              verbose: false
              customCommand: run build -- --configuration $(PROFILE_QAS)
          - task: Docker@2
            displayName: "Push and Push Image"
            inputs:
              command: buildAndPush
              containerRegistry: $(GCP_REGISTRY_QAS)
              repository: "$(GCP_PROJECT_QAS)/$(owner)-$(typeapp)-$(nameapp)"
              tags: $(tag)
      - deployment: qaDeploy
        displayName: qaDeploy
        dependsOn: buildJobQas
        condition: >-
          and(succeeded('buildJobQas'),or(eq(variables['Build.SourceBranch'], 'refs/heads/topic'), eq(variables['Build.SourceBranch'], 'refs/heads/${{parameters.qas}}')))
        environment: testing
        pool:
          vmImage: $(vmImageName)
        variables:
          subdomain: qas-$(namespace)-$(owner)-$(typeapp)-$(nameapp)
          domain: solucionesdigitalfps.com
          secret: solucionesdigitalfps-com
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubectlInstaller@0
                  displayName: Kubectl installer
                  inputs:
                    kubectlVersion: $(KUBECTL_VERSION)
                - download: current
                  artifact: k8s
                - bash: |
                    ccommit="$(Build.SourceVersion)"
                    echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
                  displayName: setvariables
                  name: setvariables
                - bash: |
                    sed -i 's/#{PROJECT}/$(GCP_PROJECT_QAS)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{TAG}/$(tag)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{PORT}/$(PORT)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{PROFILE}/$(PROFILE_QAS)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{NAMESPACE}/$(NAMESPACE)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{SUBDOMAIN}/$(subdomain)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{DOMAIN}/$(domain)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{SECRET}/$(secret)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{owner}/$(owner)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{typeapp}/$(typeapp)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{nameapp}/$(nameapp)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                  displayName: replaceParameters
                  name: replaceParameters
                - task: Kubernetes@1
                  displayName: kubectl apply
                  inputs:
                    connectionType: Kubernetes Service Connection
                    kubernetesServiceEndpoint: $(GCP_GKE_QAS)
                    command: apply
                    arguments: -f $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    versionOrLocation: version
                    versionSpec: $(KUBECTL_VERSION)
                - task: AzureCLI@2
                  displayName: AutoRecordDNS
                  inputs:
                    azureSubscription: 'SP-LOWENVIRONMENTS-GCP'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: 'az network dns record-set a add-record -g rg_ti-arq-dig-dev -z solucionesdigitalfps.com -n qas-$(namespace)-$(owner)-$(typeapp)-$(nameapp) -a 34.111.153.117'
  - stage: uatDeployAWS
    displayName: uatDeployAWS
    dependsOn: qaDeploy
    condition: >-
      and(succeeded('compileAndScan'),or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/${{parameters.uat}}')))
    jobs:
      - job: buildJobUatAWS
        displayName: buildJob UatAWS
        continueOnError: false
        pool:
          vmImage: $(vmImageName)
        steps:
          - bash: |
              ccommit="$(Build.SourceVersion)"
              echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
            displayName: setvariables
            name: setvariables
          - bash: |
              #fullbranch=$(Build.SourceBranch)
              #echo "##vso[task.setvariable variable=branch]${fullbranch:11}"
            displayName: readBranch
            name: readBranch
          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: 14.17.6
          - task: Npm@1
            displayName: npmInstall
            name: npmInstall
            inputs:
              command: custom
              verbose: false
              customCommand: install
          - task: Npm@1
            displayName: npmBuild
            name: npmBuild
            inputs:
              command: custom
              verbose: false
              customCommand: run build -- --configuration $(PROFILE_UAT)
          - task: Docker@2
            displayName: 'build Image'
            inputs:
              command: build
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              buildContext: '$(Build.SourcesDirectory)'
              repository: '$(ECR_IMAGE)'
          - task: ECRPushImage@1
            inputs:
              awsCredentials: $(AWS_ECR)
              regionName: $(AWS_REGION)
              imageSource: 'imagename'
              sourceImageName: '$(ECR_IMAGE)'
              sourceImageTag: $(Build.BuildId)
              pushTag: $(tag)
              repositoryName: '$(ECR_IMAGE)'
      - deployment: uatDeployAWS
        displayName: uatDeployAWS
        dependsOn: buildJobUatAWS
        condition: >-
          and(succeeded('buildJobUatAWS'),or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/${{parameters.uat}}')))
        environment: uat
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubectlInstaller@0
                  displayName: Kubectl installer
                  inputs:
                    kubectlVersion: $(KUBECTL_VERSION)
                - download: current
                  artifact: k8s
                - bash: |
                    ccommit="$(Build.SourceVersion)"
                    echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
                  displayName: setvariables
                  name: setvariables
                - bash: |
                    sed -i 's/#{AWS_REGION}/$(AWS_REGION)/g' $(Pipeline.Workspace)/k8s/eks/eks-deployment-uat.yml
                    sed -i 's/#{TAG}/$(tag)/g' $(Pipeline.Workspace)/k8s/eks/eks-deployment-uat.yml
                    sed -i 's/#{PORT}/$(PORT)/g' $(Pipeline.Workspace)/k8s/eks/eks-deployment-uat.yml
                    sed -i 's/#{TARGET_PORT}/$(TARGET_PORT)/g' $(Pipeline.Workspace)/k8s/eks/eks-deployment-uat.yml
                    sed -i 's/#{PROFILE}/$(PROFILE_UAT)/g' $(Pipeline.Workspace)/k8s/eks/eks-deployment-uat.yml
                    sed -i 's/#{NAMESPACE}/$(NAMESPACE)/g' $(Pipeline.Workspace)/k8s/eks/eks-deployment-uat.yml
                  displayName: replaceParameters
                  name: replaceParameters
                - task: enkelwill.aws-iam-authenticator.custom-build-release-task.aws-eks-authenticator@0
                  displayName: 'AWS EKS Configure'
                  inputs:
                    clusterName: $(AWS_EKS_UAT)
                    awsCredentials: $(AWS_EKS)
                    regionName: $(AWS_REGION)
                - task: Kubernetes@1
                  displayName: kubectl apply
                  inputs:
                    connectionType: Kubernetes Service Connection
                    kubernetesServiceEndpoint: $(AWS_EKS_UAT)
                    command: apply
                    arguments: -f $(Pipeline.Workspace)/k8s/eks/eks-deployment-uat.yml
                    versionOrLocation: version
                    versionSpec: $(KUBECTL_VERSION)
  - stage: uatDeploy
    displayName: uatDeploy
    dependsOn: qaDeploy
    condition: >-
      and(succeeded('compileAndScan'),or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/${{parameters.uat}}')))
    jobs:
      - job: buildJobUat
        displayName: buildJob Uat
        continueOnError: false
        pool:
          vmImage: $(vmImageName)
        steps:
          - bash: |
              ccommit="$(Build.SourceVersion)"
              echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
            displayName: setvariables
            name: setvariables
          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: 14.17.6
          - task: Npm@1
            displayName: npmInstall
            name: npmInstall
            inputs:
              command: custom
              verbose: false
              customCommand: install
          - task: Npm@1
            displayName: npmBuild
            name: npmBuild
            inputs:
              command: custom
              verbose: false
              customCommand: run build -- --configuration $(PROFILE_UAT)
          - task: Docker@2
            displayName: "Push and Push Image"
            inputs:
              command: buildAndPush
              containerRegistry: $(GCP_REGISTRY_UAT)
              repository: "$(GCP_PROJECT_UAT)/$(owner)-$(typeapp)-$(nameapp)"
              tags: $(tag)
      - deployment: uatDeploy
        displayName: uatDeploy
        dependsOn: buildJobUat
        condition: >-
          and(succeeded('buildJobUat'),or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/${{parameters.uat}}')))
        environment: uat
        pool:
          vmImage: $(vmImageName)
        variables:
          subdomain: uat-$(namespace)-$(owner)-$(typeapp)-$(nameapp)
          domain: solucionesdigitalfps.com
          secret: solucionesdigitalfps-com
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubectlInstaller@0
                  displayName: Kubectl installer
                  inputs:
                    kubectlVersion: $(KUBECTL_VERSION)
                - download: current
                  artifact: k8s
                - bash: |
                    ccommit="$(Build.SourceVersion)"
                    echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
                  displayName: setvariables
                  name: setvariables
                - bash: |
                    sed -i 's/#{PROJECT}/$(GCP_PROJECT_UAT)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{TAG}/$(tag)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{PORT}/$(PORT)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{PROFILE}/$(PROFILE_UAT)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{NAMESPACE}/$(NAMESPACE)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{SUBDOMAIN}/$(subdomain)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{DOMAIN}/$(domain)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{SECRET}/$(secret)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{owner}/$(owner)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{typeapp}/$(typeapp)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    sed -i 's/#{nameapp}/$(nameapp)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                  displayName: replaceParameters
                  name: replaceParameters
                - task: Kubernetes@1
                  displayName: kubectl apply
                  inputs:
                    connectionType: Kubernetes Service Connection
                    kubernetesServiceEndpoint: $(GCP_GKE_UAT)
                    command: apply
                    arguments: -f $(Pipeline.Workspace)/k8s/gke/gke-deployment.yml
                    versionOrLocation: version
                    versionSpec: $(KUBECTL_VERSION)
                - task: AzureCLI@2
                  displayName: AutoRecordDNS
                  inputs:
                    azureSubscription: 'SP-LOWENVIRONMENTS-GCP'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: 'az network dns record-set a add-record -g rg_ti-arq-dig-dev -z solucionesdigitalfps.com -n uat-$(namespace)-$(owner)-$(typeapp)-$(nameapp) -a 34.107.197.152'
  - stage: prdDeployAWS
    displayName: prdDeployAWS
    dependsOn: uatDeployAWS
    condition: >-
        and(succeeded('compileAndScan'), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
    jobs:
      - job: buildJobPrdAWS
        displayName: buildJob PrdAWS
        continueOnError: false
        pool:
          vmImage: $(vmImageName)
        steps:
          - bash: |
              ccommit="$(Build.SourceVersion)"
              echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
            displayName: setvariables
            name: setvariables
          - bash: |
              #fullbranch=$(Build.SourceBranch)
              #echo "##vso[task.setvariable variable=branch]${fullbranch:11}"
            displayName: readBranch
            name: readBranch
          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: 14.17.6
          - task: Npm@1
            displayName: npmInstall
            name: npmInstall
            inputs:
              command: custom
              verbose: false
              customCommand: install
          - task: Npm@1
            displayName: npmBuild
            name: npmBuild
            inputs:
              command: custom
              verbose: false
              customCommand: run build -- --configuration $(PROFILE_PRD)
          - task: Docker@2
            displayName: 'build Image'
            inputs:
              command: build
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              buildContext: '$(Build.SourcesDirectory)'
              repository: '$(ECR_IMAGE)'
          - task: ECRPushImage@1
            inputs:
              awsCredentials: $(AWS_ECR)
              regionName: $(AWS_REGION)
              imageSource: 'imagename'
              sourceImageName: '$(ECR_IMAGE)'
              sourceImageTag: $(Build.BuildId)
              pushTag: $(tag)
              repositoryName: '$(ECR_IMAGE)'
      - deployment: prdDeployAWS
        displayName: prdDeployAWS
        dependsOn: buildJobPrdAWS
        condition: >-
          and(succeeded('buildJobPrdAWS'), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
        environment: production
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubectlInstaller@0
                  displayName: Kubectl installer
                  inputs:
                    kubectlVersion: $(KUBECTL_VERSION)
                - download: current
                  artifact: k8s
                - bash: |
                    ccommit="$(Build.SourceVersion)"
                    echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
                  displayName: setvariables
                  name: setvariables
                - bash: |
                    sed -i 's/#{AWS_REGION}/$(AWS_REGION)/g' $(Pipeline.Workspace)/k8s/eks/eks-deployment-prd.yml
                    sed -i 's/#{TAG}/$(tag)/g' $(Pipeline.Workspace)/k8s/eks/eks-deployment-prd.yml
                    sed -i 's/#{PORT}/$(PORT)/g' $(Pipeline.Workspace)/k8s/eks/eks-deployment-prd.yml
                    sed -i 's/#{TARGET_PORT}/$(TARGET_PORT)/g' $(Pipeline.Workspace)/k8s/eks/eks-deployment-prd.yml
                    sed -i 's/#{PROFILE}/$(PROFILE_PRD)/g' $(Pipeline.Workspace)/k8s/eks/eks-deployment-prd.yml
                  displayName: replaceParameters
                  name: replaceParameters
                - task: enkelwill.aws-iam-authenticator.custom-build-release-task.aws-eks-authenticator@0
                  displayName: 'AWS EKS Configure'
                  inputs:
                    clusterName: $(AWS_EKS_PRD)
                    awsCredentials: $(AWS_EKS)
                    regionName: $(AWS_REGION)
                - task: Kubernetes@1
                  displayName: kubectl apply
                  inputs:
                    connectionType: Kubernetes Service Connection
                    kubernetesServiceEndpoint: $(AWS_EKS_PRD)
                    command: apply
                    arguments: -f $(Pipeline.Workspace)/k8s/eks/eks-deployment-prd.yml
                    versionOrLocation: version
                    versionSpec: $(KUBECTL_VERSION)
  - stage: prdDeploy
    displayName: prdDeploy
    dependsOn: uatDeploy
    condition: >-
      and(succeeded('compileAndScan'), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
    jobs:
      - job: buildJobPrd
        displayName: buildJob Prd
        continueOnError: false
        pool:
          vmImage: $(vmImageName)
        steps:
          - bash: |
              ccommit="$(Build.SourceVersion)"
              echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
            displayName: setvariables
            name: setvariables
          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: 14.17.6
          - task: Npm@1
            displayName: npmInstall
            name: npmInstall
            inputs:
              command: custom
              verbose: false
              customCommand: install
          - task: Npm@1
            displayName: npmBuild
            name: npmBuild
            inputs:
              command: custom
              verbose: false
              customCommand: run build -- --configuration $(PROFILE_PRD)
          - task: Docker@2
            displayName: "Push and Push Image"
            inputs:
              command: buildAndPush
              containerRegistry: $(GCP_REGISTRY_PRD)
              repository: "$(GCP_PROJECT_PRD)/$(owner)-$(typeapp)-$(nameapp)"
              tags: $(tag)
      - deployment: prdDeploy
        displayName: prdDeploy
        dependsOn: buildJobPrd
        condition: >-
          and(succeeded('buildJobPrd'), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
        environment: production
        pool:
          vmImage: $(vmImageName)
        variables:
          subdomain: $(namespace)-$(owner)-$(typeapp)-$(nameapp)
          domain: fapedigital.com
          secret: fapedigital-com
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubectlInstaller@0
                  displayName: Kubectl installer
                  inputs:
                    kubectlVersion: $(KUBECTL_VERSION)
                - download: current
                  artifact: k8s
                - bash: |
                    ccommit="$(Build.SourceVersion)"
                    echo "##vso[task.setvariable variable=tag]${ccommit:0:8}"
                  displayName: setvariables
                  name: setvariables
                - bash: |
                    sed -i 's/#{PROJECT}/$(GCP_PROJECT_PRD)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                    sed -i 's/#{TAG}/$(tag)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                    sed -i 's/#{PORT}/$(PORT)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                    sed -i 's/#{PROFILE}/$(PROFILE_PRD)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                    sed -i 's/#{NAMESPACE}/$(NAMESPACE)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                    sed -i 's/#{SUBDOMAIN}/$(subdomain)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                    sed -i 's/#{DOMAIN}/$(domain)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                    sed -i 's/#{SECRET}/$(secret)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                    sed -i 's/#{owner}/$(owner)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                    sed -i 's/#{typeapp}/$(typeapp)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                    sed -i 's/#{nameapp}/$(nameapp)/g' $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                  displayName: replaceParameters
                  name: replaceParameters
                - task: Kubernetes@1
                  displayName: kubectl apply
                  inputs:
                    connectionType: Kubernetes Service Connection
                    kubernetesServiceEndpoint: $(GCP_GKE_PRD)
                    command: apply
                    arguments: -f $(Pipeline.Workspace)/k8s/gke/gke-deployment-prd.yml
                    versionOrLocation: version
                    versionSpec: $(KUBECTL_VERSION)
                - task: AzureCLI@2
                  displayName: AutoRecordDNS
                  inputs:
                    azureSubscription: 'SP-LOWENVIRONMENTS-GCP'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: 'az network dns record-set a add-record -g rg_certificates -z fapedigital.com -n $(namespace)-$(owner)-$(typeapp)-$(nameapp) -a 34.110.190.6'